#include "control_thread.h"
#include "Ram.h"
//#include <stdio.h>

/* Control Thread entry function */
void control_thread_entry(void)
{
    SR_InitRam();

    g_timer0.p_api->open(g_timer0.p_ctrl, g_timer0.p_cfg);

    g_timer0.p_api->start(g_timer0.p_ctrl);

    while (1)
    {
        if(bf_SystemTickTrue == C_TRUE)
        {
            bf_SystemTickTrue = C_FALSE;
            u16TimePerSec1ms--;

            if(u16TimePerSec1ms == 0)
            {
               // static int time;
                u16TimeSec++;
               //snprintf(g_value, sizeof(g_value), "%d", u16TimeSec);
                u16TimePerSec1ms = C_TICK_PER_SEC;

                static ioport_level_t level1 = IOPORT_LEVEL_HIGH;

                /* Determine the next state of the LEDs */
                if(IOPORT_LEVEL_LOW == level1)
                  {
                     level1 = IOPORT_LEVEL_HIGH;
                  }
                else
                  {
                     level1 = IOPORT_LEVEL_LOW;
                  }

                g_ioport.p_api->pinWrite(IOPORT_PORT_06_PIN_00, level1);
             }
        }

        tx_thread_sleep (1);
    }
}

void SR_SystemTicks_callback(timer_callback_args_t *p_args)
{
    (void)p_args;
    bf_SystemTickTrue = C_TRUE;
}
